Top: Array

1. 各种sum
1a. Sum 注意要求indices，所以不能sort
var twoSum = function(nums, target) {
    var n = nums.length;
    if(n < 1){
        return [];
    }
    var ref = new Map();
    for(var i = 0; i < n; i++){
        if(ref.has(target-nums[i])){
            return [ref.get(target-nums[i]), i];
        }
        else{
            ref.set(nums[i], i);
        }
    }
    return [];
};

1b. 3 Sum
要求是 triplets，不用indices，所以元素要sort
为了避免重复，跳过之前已经选出的triplets
var threeSum = function(nums) {
    var n = nums.length;
    if(n < 3){
        return [];
    }
    var res  = [];
    nums.sort(function(a,b){
        return a-b;
    });
    for(var i = 0; i < n-2; i++){
        if(i > 0 && nums[i] === nums[i-1]){
            continue;
        }
        var p = i+1;
        var q = n-1;
        var target = 0 - nums[i];
        while(p < q){
            if(p > i+1 && nums[p] === nums[p-1]){
                p++;
                continue;
            }
            if(nums[p] + nums[q] < target){
                p++;
            }
            else if(nums[p] + nums[q] > target){
                q--;
            }
            else{
                res.push([nums[i], nums[p], nums[q]]);
                p++;
                q--;
            }
        }
    }
    return res;
};

1c. 3 Sum Closest
加入一个dif表示delta

1d. 3 Sum Smaller
注意只要求出个数，不用每一个element
var threeSumSmaller = function(nums, target) {
    var n = nums.length;
    if(n < 3){
        return 0;
    }
    nums.sort(function(a,b){
        return a-b;
    });
    var res = 0;
    for(var i = 0; i < n-2; i++){
        var p = i+1;
        var q = n-1;
        var tofind = target-nums[i];
        while(p < q){
            if(nums[p] + nums[q] >= tofind){
                q--;
            }
            else{
                res += q-p;
                p++;
            }
        }
    }
    return res;
};

1e. 4 Sum
基于3 Sum，多一层的复杂度

2. Remove elements
两种方法：一种是begin表示实际有效idx，只有在！==val的时候begin++；一种是用2pointers，复杂但是更加通用
var removeElement = function(nums, val) {
    if(nums.length < 1){
        return nums.length;
    }
    var p = 0;
    var q = nums.length - 1;
    while(q >= 0 && nums[q] === val){
        q--;
    }
    while(p < q){
        if(nums[p] === val){
            nums[p] = nums[q];
            nums[q] = val;
            p++;
            q--;
            while(p < q && nums[q] === val){
                q--;
            }
        }
        else{
            p++;
        }
    }
    return (nums[p]===val)? p : (p+1);
};
